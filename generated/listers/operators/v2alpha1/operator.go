/*
Copyright 2019 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v2alpha1

import (
	v2alpha1 "github.com/operator-framework/api/operators/v2alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OperatorLister helps list Operators.
type OperatorLister interface {
	// List lists all Operators in the indexer.
	List(selector labels.Selector) (ret []*v2alpha1.Operator, err error)
	// Get retrieves the Operator from the index for a given name.
	Get(name string) (*v2alpha1.Operator, error)
	OperatorListerExpansion
}

// operatorLister implements the OperatorLister interface.
type operatorLister struct {
	indexer cache.Indexer
}

// NewOperatorLister returns a new OperatorLister.
func NewOperatorLister(indexer cache.Indexer) OperatorLister {
	return &operatorLister{indexer: indexer}
}

// List lists all Operators in the indexer.
func (s *operatorLister) List(selector labels.Selector) (ret []*v2alpha1.Operator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2alpha1.Operator))
	})
	return ret, err
}

// Get retrieves the Operator from the index for a given name.
func (s *operatorLister) Get(name string) (*v2alpha1.Operator, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2alpha1.Resource("operator"), name)
	}
	return obj.(*v2alpha1.Operator), nil
}
